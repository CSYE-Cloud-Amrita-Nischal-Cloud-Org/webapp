name: Build Custom Image With Packer

on:
  pull_request:
    branches:
      - main
#    types:
#      - closed

jobs:
  build_and_test:
    name: Build and upload jar file then create custom AMI
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-24.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          architecture: x64

      - name: Setup gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run tests
        run: ./gradlew test

      - name: Build jar file
        run: ./gradlew clean build

      - name: Install Packer on Ubuntu
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y packer

      - name: Configure AWS Credentials Action for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Packer
        run: |
          packer init ./packer/aws.pkr.hcl

      - name: Build Custom Image
        run: |
          packer build \
            -var "access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var "secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "ami_user=${{ secrets.AMI_USER }}" ./packer/aws.pkr.hcl 

      - name: Retrieve Latest AMI ID
        id: retrieve_ami_id
        run: |
          echo "Retrieving latest AMI ID..."
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=csye6225_f24_app_*" \
                      "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)
          [ -z "$AMI_ID" ] && echo "Error: AMI ID not found." && exit 1
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # ------------------ Switch to Demo Account for Deployment ------------------
      - name: Configure AWS Credentials Action for Demo Account
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Retrieve Launch Template ID
        id: retrieve_launch_template_id
        run: |
          echo "Retrieving Launch Template ID..."
          LAUNCH_TEMPLATE_NAME=${{ secrets.LAUNCH_TEMPLATE_NAME }}
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=$LAUNCH_TEMPLATE_NAME" \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)
          [ -z "$LAUNCH_TEMPLATE_ID" ] && echo "Error: Launch Template ID not found." && exit 1
          echo "Launch Template ID: $LAUNCH_TEMPLATE_ID"
          echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

      - name: Create New Launch Template Version
        id: launch_template_version
        run: |
          AMI_ID="${{ env.AMI_ID }}"
          LT_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID }} \
            --source-version '$Latest' \
            --version-description "Version with AMI $AMI_ID" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber'\
            --output text)
          [ -z "$LT_VERSION" ] && echo "Error: Failed to create new Launch Template version." && exit 1
          echo "LT_VERSION=$LT_VERSION" >> $GITHUB_ENV

      - name: Set Auto Scaling Group Name
        id: set_asg_name
        run: |
          echo "Set auto-scaling group name in github env..."
          ASG_NAME=${{ secrets.ASG_NAME }}
          [ -z "$ASG_NAME" ] && echo "Error: Auto Scaling Group name is not set." && exit 1
          echo "ASG_NAME=$ASG_NAME" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        id: update_asg
        run: |
          echo "Updating auto-scaling group..."
          LT_VERSION="${{ env.LT_VERSION }}"
          ASG_NAME="${{ env.ASG_NAME }}"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "$ASG_NAME" \
            --launch-template "LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=$LT_VERSION"
          echo "Auto Scaling Group '$ASG_NAME' updated to use with Launch Template version '$LT_VERSION'."

      - name: Start Instance Refresh
        id: start_instance_refresh
        run: |
          echo "Starting instance refresh..."
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --preferences '{
              "MinHealthyPercentage": 90,
              "InstanceWarmup": 300
            }' \
            --query 'InstanceRefreshId' \
            --output text)
          [ -z "$INSTANCE_REFRESH_ID" ] && echo "Error: Failed to start instance refresh." && exit 1
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        id: wait_for_instance_refresh_completion
        run: |
          INSTANCE_REFRESH_ID="${{ env.INSTANCE_REFRESH_ID }}"
          ASG_NAME="${{ env.ASG_NAME }}"
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$INSTANCE_REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            case "$STATUS" in
              "Successful")
                echo "Instance refresh completed successfully."
                exit 0
                ;;
              "Failed")
                echo "Instance refresh failed."
                exit 1
                ;;
              "Cancelled")
                echo "Instance refresh was cancelled."
                exit 1
                ;;
              *)
                echo "Current status: $STATUS."
                echo "Waiting for instance refresh to complete..."
                sleep 20
                ;;
            esac
          done

      - name: Deployment Completed
        run: echo "Deployment workflow completed successfully."